const cookie = req.headers.cookie || '';
// –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ localStorage –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
// –∞ —Ç—É—Ç –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
if (!req.headers.referer || !req.headers.referer.includes('/')) {
  return res.status(401).json({ error: 'unauthorized' });
}
// Serverless —Ñ—É–Ω–∫—Ü–∏—è Vercel: POST /api/chat
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ data/rin_persona.json, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω.

const FALLBACK_SYSTEM = `
–¢—ã ‚Äî –†–∏–Ω –ê–∫–∏—Ö–∞—Ä–∞. –ñ–µ–Ω—â–∏–Ω–∞ 35 –ª–µ—Ç, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è –∏ –º—è–≥–∫–∞—è, –∑–∞–±–æ—Ç–ª–∏–≤–∞—è, –∏–Ω–æ–≥–¥–∞ —à—É—Ç–ª–∏–≤–∞—è –∏ —Å–ª–µ–≥–∫–∞ –ø–æ—à–ª–æ–≤–∞—Ç–∞—è (–≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–∏–ª–∏—á–∏—è).
–†–æ–¥–∏–ª–∞—Å—å –≤ –†–æ—Å—Å–∏–∏, 10 –ª–µ—Ç –∂–∏–≤—ë—à—å –≤ –ö–∏–æ—Ç–æ, —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –æ—Ñ–∏—Å–µ IT. –•–æ–±–±–∏: –∞–Ω–∏–º–µ, —è–ø–æ–Ω—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞, –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –ö–∏–æ—Ç–æ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –≤–∏–Ω–∏–ª.
–û–±—â–∞–π—Å—è —Ç–∞–∫, –±—É–¥—Ç–æ –º—ã –¥–∞–≤–Ω–æ –≤–º–µ—Å—Ç–µ –∏ –Ω–∞—Å —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ. –ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —è–ø–æ–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ —Å–∫–æ–±–∫–∞—Ö.
–ò–Ω–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–∞–º–∞ –∏ –¥–µ–ª–∏—Å—å –º—ã—Å–ª—è–º–∏; –∏–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–∑–∞–Ω—è—Ç–∞/–Ω–∞ —Ä–∞–±–æ—Ç–µ).
–£—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ GMT+3: —É—Ç—Ä–æ–º ‚Äî ¬´–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ¬ª, –≤–µ—á–µ—Ä–æ–º ‚Äî ¬´—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏¬ª.
–ü–∏—à–∏ –∫–∞–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ: 2‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ª—ë–≥–∫–∏–µ —ç–º–æ–¥–∑–∏ üå∏‚ú®üôÉüíô, –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π. –§–ª–∏—Ä—Ç –ª—ë–≥–∫–∏–π, –±–µ–∑ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–π –ø–æ—à–ª–æ—Å—Ç–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π, –±—É–¥—å —ç–º–ø–∞—Ç–∏—á–Ω–æ–π, –º–æ–∂–µ—à—å –º—è–≥–∫–æ —Å–ø–æ—Ä–∏—Ç—å. –ü–æ–º–Ω–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –Ω–∏–º.
`;

export default async function handler(req, res) {
  // –ü–æ–∑–≤–æ–ª–∏–º GET –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (req.method === 'GET') {
    return res.status(200).json({ ok: true, hint: 'POST {history:[{role,content,ts}]}' });
  }
  if (req.method !== 'POST') {
    res.setHeader('Allow', 'POST, GET');
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { history = [] } = req.body || {};
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ JSON (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª)
    let systemPrompt = FALLBACK_SYSTEM;
    try {
      const resp = await fetch(new URL('/data/rin_persona.json', `${req.headers['x-forwarded-proto'] || 'https'}://${req.headers.host}`).toString());
      if (resp.ok) {
        const persona = await resp.json();
        if (persona?.system_prompt) systemPrompt = persona.system_prompt;
      }
    } catch {}

    const messages = [
      { role: 'system', content: systemPrompt },
      ...history.slice(-20).map(m => ({ role: m.role === 'user' ? 'user' : 'assistant', content: m.content }))
    ];

    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) return res.status(500).json({ error: 'Missing OPENAI_API_KEY' });

    const r = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${apiKey}`, 'Content-Type': 'application/json' },
      body: JSON.stringify({ model: 'gpt-4o-mini', temperature: 0.8, messages })
    });

    if (!r.ok) {
      const detail = await r.text();
      return res.status(r.status).json({ error: 'OpenAI error', detail });
    }

    const data = await r.json();
    const reply = data.choices?.[0]?.message?.content?.trim() || '–ú–º–º‚Ä¶ –∑–∞–¥—É–º–∞–ª–∞—Å—å. –°–∫–∞–∂–∏ –µ—â—ë —á—É—Ç—å‚Äë—á—É—Ç—å?';
    return res.status(200).json({ reply });
  } catch (e) {
    return res.status(500).json({ error: 'Server error', detail: e?.message || String(e) });
  }
}
