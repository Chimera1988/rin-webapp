// public/lib/stickers.js
// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è:
// 1) –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ (v3),
// 2) —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (sentiment/intent/timeOfDay/phase),
// 3) –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è "—Å—Ç–∞–≤–∏—Ç—å –ª–∏ —Å—Ç–∏–∫–µ—Ä",
// 4) –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–∞ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏ (utterance),
// 5) —É—á—ë—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∫—É–ª–¥–∞—É–Ω—ã / diversity / user affinity).

// ---- –£–¢–ò–õ–ò–¢–´

const clamp01 = (x) => Math.max(0, Math.min(1, x));
const todayKey = () => new Date().toISOString().slice(0, 10);

function lower(s) { return (s || "").toLowerCase(); }
function includesAny(text, items=[]) {
  const t = lower(text);
  return items.some(k => t.includes(lower(k)));
}

function readStats() {
  try {
    const raw = localStorage.getItem('rin-stats');
    if (!raw) return { bySrc: {}, recent: [], today: todayKey() };
    const obj = JSON.parse(raw);
    if (obj.today !== todayKey()) {
      // –Ω–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –æ–±–Ω—É–ª–∏–º –¥–Ω–µ–≤–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏
      for (const k of Object.keys(obj.bySrc)) {
        obj.bySrc[k].today = 0;
      }
      obj.today = todayKey();
    }
    obj.recent ||= [];
    return obj;
  } catch { return { bySrc: {}, recent: [], today: todayKey() }; }
}
function writeStats(stats) {
  try { localStorage.setItem('rin-stats', JSON.stringify(stats)); } catch {}
}

function bumpStats(stats, src) {
  stats.bySrc[src] ||= { today: 0, liked: 0, skipped: 0 };
  stats.bySrc[src].today++;
  // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
  stats.recent = [src, ...stats.recent.filter(s => s !== src)].slice(0, 10);
  writeStats(stats);
}

function userAffinity(stats, src) {
  const s = stats.bySrc[src];
  if (!s) return 1.0;
  const base = 1.0 + Math.max(-0.2, Math.min(0.2, (s.liked - s.skipped) * 0.05));
  return +(base.toFixed(3));
}

/* === –î–ï–¢–ï–†–ú–ò–ù–ò–†–û–í–ê–ù–ù–´–ô –†–ê–ù–î–û–ú (seeded) === */
function hash32(str){
  let h = 2166136261 >>> 0; // FNV-1a
  for (let i = 0; i < str.length; i++) {
    h ^= str.charCodeAt(i);
    h = Math.imul(h, 16777619);
  }
  return h >>> 0;
}
function seededRand(seedText){
  const h = hash32(String(seedText || ""));
  // –æ–¥–∏–Ω —à–∞–≥ LCG –¥–ª—è 0..1
  const x = (h * 1664525 + 1013904223) >>> 0;
  return x / 2**32;
}

// ---- –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò (–ø—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏)

function detectTimeOfDay(date = new Date()) {
  const h = date.getHours();
  if (h >= 5 && h < 12) return "morning";
  if (h >= 12 && h < 18) return "day";
  if (h >= 18 && h < 24) return "evening";
  return "night";
}

function detectSentiment(text) {
  const t = lower(text);
  const happy = ["—É—Ä–∞","–∫–ª–∞—Å—Å","—Å—É–ø–µ—Ä","—Ä–∞–¥–∞","—Ä–∞–¥","—Å—á–∞—Å—Ç","–æ–±–æ–∂","–ª—é–±–ª—é","üòç","üòä",":)","‚ò∫Ô∏è","‚ù§Ô∏è"];
  const veryHappy = ["–æ—Ñ–∏–≥–µ–Ω–Ω–æ","–ª—É—á—à–µ –Ω–µ –±—ã–≤–∞–µ—Ç","–º–µ—á—Ç–∞ —Å–±—ã–ª–∞—Å—å","üéâ","ü•≥","üíñ"];
  const sad = ["–≥—Ä—É—Å—Ç","–∂–∞–ª—å","–æ–±–∏–¥–Ω–æ","–ø–ª–æ—Ö–æ","–ø–µ—á–∞–ª—å","üòî","üò¢","üò≠",":("];
  const verySad = ["–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ","—É–∂–∞—Å","–¥–µ–ø—Ä–µ—Å—Å","–Ω–µ–≤—ã–Ω–æ—Å–∏–º–æ","–æ—Ç—á–∞—è–Ω","–±–µ–∑–Ω–∞–¥—ë–∂"];
  const angry = ["–∑–ª—é—Å—å","–±–µ—Å–∏—Ç","—Ä–∞–∑–¥—Ä–∞–∂","—á—ë—Ä—Ç","–Ω–µ–Ω–∞–≤–∏–∂","–∫–∞–ø–µ—Ü","%$#@","!!!"];

  if (includesAny(t, veryHappy)) return "very_happy";
  if (includesAny(t, angry)) return "angry";
  if (includesAny(t, verySad)) return "very_sad";
  if (includesAny(t, sad)) return "sad";
  if (includesAny(t, happy)) return "happy";
  return "neutral";
}

function detectIntent(text) {
  const t = lower(text);
  if (t.includes("?") || includesAny(t, ["–ø–æ—á–µ–º—É","–∫–∞–∫","–∫–æ–≥–¥–∞","—á—Ç–æ","–∑–∞—á–µ–º"])) return "question";
  if (includesAny(t, ["—Å–ø–∞—Å–∏–±–æ","–±–ª–∞–≥–æ–¥–∞—Ä—é","–±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω","–±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞"])) return "thanks";
  if (includesAny(t, ["–ø—Ä–æ—Å—Ç–∏","–∏–∑–≤–∏–Ω–∏","—Å–æ—Ä—Ä–∏"])) return "apology";
  if (includesAny(t, ["–æ–±–Ω–∏–º–∏","–ø–æ–¥–¥–µ—Ä–∂–∏","—Ç—è–∂–µ–ª–æ","–º–Ω–µ –ø–ª–æ—Ö–æ","–Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞"])) return "support";
  if (includesAny(t, ["—Ü–µ–ª—É—é","–æ–±–Ω–∏–º–∞—é","—Å–∫—É—á","–ø–æ—Ü–µ–ª—É–π","–º–∏–ª—ã–π","–º–∏–ª–∞—è","‚ù§Ô∏è","üòò"])) return "flirt";
  if (includesAny(t, ["–¥–∞–≤–∞–π","—Å–¥–µ–ª–∞–µ–º","–ø–æ–µ—Ö–∞–ª–∏","–ø–ª–∞–Ω","–∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º"])) return "plan";
  if (includesAny(t, ["–ø–æ–∫–∞","—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏","–¥–æ –∑–∞–≤—Ç—Ä–∞","—É–≤–∏–¥–∏–º—Å—è"])) return "goodbye";
  if (includesAny(t, ["–ø—Ä–æ—Å—å–±–∞","–º–æ–∂–µ—à—å","—Å–¥–µ–ª–∞–π","–Ω—É–∂–Ω–æ"])) return "request";
  return "smalltalk";
}

// ---- –°–ö–û–†–ò–ù–ì

function kwScore(text, kws) {
  if (!kws?.length) return 0;
  const t = lower(text);
  const hits = kws.filter(k => t.includes(lower(k))).length;
  if (!hits) return 0;
  return clamp01(hits / Math.min(4, kws.length)); // –Ω–∞—Å—ã—â–µ–Ω–∏–µ
}

function moodScore(candidateMoods, desiredMoods) {
  if (!desiredMoods?.length) return 0.5;
  const set = new Set(candidateMoods);
  const hit = desiredMoods.filter(m => set.has(m)).length;
  return clamp01(hit / desiredMoods.length) || (set.has("neutral") ? 0.5 : 0.0);
}

function intentScore(candidate, intent) {
  if (!candidate.intents?.length) return 0.5;
  return candidate.intents.includes(intent) ? 1 : 0;
}

function timeOfDayScore(cfg, tod, moods) {
  const pref = cfg.defaults?.byTime?.[tod]?.moods || [];
  if (!pref.length) return 0.5;
  const s = new Set(pref);
  const hit = moods.some(m => s.has(m));
  return hit ? 1 : 0.4;
}

// —Å—Ç–∞–±–∏–ª–µ–Ω –≤—ã–±–æ—Ä —Å—Ä–µ–¥–∏ —Ä–∞–≤–Ω—ã—Ö –ø–æ score
function pickStableByScore(cands, seedText){
  if (!cands || !cands.length) return null;
  return cands
    .slice()
    .sort((a,b)=> b.score - a.score
      || (seededRand(String(seedText)+a.s.src) - seededRand(String(seedText)+b.s.src)))[0];
}

// ---- –ü–†–ê–í–ò–õ–ê

function violatesGlobal(cfg, history) {
  const g = cfg.defaults?.global || { min_gap_messages: 2, max_ratio: 0.35 };
  const ratio = history.withStickers / Math.max(1, history.total);
  if (history.messagesSinceSticker < g.min_gap_messages) return true;
  if (ratio > g.max_ratio) return true;
  return false;
}

function shouldConsider(cfg, s, signals, stats) {
  if (violatesGlobal(cfg, signals.history)) return false;

  // –ö—É–ª–¥–∞—É–Ω—ã/–∫–∞–ø
  if (s.cooldown_messages && signals.history.messagesSinceSticker < s.cooldown_messages) return false;
  const todayCount = (readStats().bySrc[s.src]?.today || 0);
  if (s.daily_cap && todayCount >= s.daily_cap) return false;

  // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è/–∑–∞–ø—Ä–µ—Ç—ã
  if (s.require?.user_state_any?.length) {
    const ok = s.require.user_state_any.some(u => signals.user_state.includes(u));
    if (!ok) return false;
  }
  if (s.avoid?.user_sentiment?.includes(signals.sentiment)) return false;

  // –ê–Ω—Ç–∏-–∫–æ–Ω—Ñ–ª–∏–∫—Ç
  if (signals.sentiment === "angry" && (s.moods?.includes("romantic") || s.moods?.includes("playful"))) return false;

  // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
  if (signals.history.recentStickerSrcs?.includes(s.src)) return false;

  return true;
}

// ---- –í–´–ë–û–†

function pickUtterance(sticker) {
  if (!sticker?.utterances?.length) return null;
  return sticker.utterances[Math.floor(Math.random() * sticker.utterances.length)];
}

/**
 * –í—ã–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–∞ —Å —Ä–∞—Å—á—ë—Ç–æ–º score –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º.
 * –î–æ–±–∞–≤–ª–µ–Ω seedText –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ tie-break –∏ grace.
 */
function pickSticker(cfg, signals, stats, seedText = null) {
  const desired = cfg.defaults?.byTime?.[signals.timeOfDay]?.moods || [];
  const candidates = (cfg.stickers || []).filter(s => shouldConsider(cfg, s, signals, stats));
  if (!candidates.length) return null;

  // –ø–æ—Å—á–∏—Ç–∞–µ–º score –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  const scored = [];
  for (const s of candidates) {
    const score =
      kwScore(signals.text, s.keywords) * 0.45 +
      moodScore(s.moods || [], desired) * 0.25 +
      intentScore(s, signals.intent) * 0.20 +
      timeOfDayScore(cfg, signals.timeOfDay, s.moods || []) * 0.10;

    const diversityPenalty = signals.history.recentStickerSrcs?.slice(-8).includes(s.src) ? 0.85 : 1;
    const aff = userAffinity(stats, s.src);
    const finalScore = score * (s.weight ?? 1) * aff * diversityPenalty;

    scored.push({ s, score: finalScore });
  }

  // –ª—É—á—à–∏–π –∏ –ø–æ—Ä–æ–≥–∏
  let best = null;
  for (const e of scored) {
    if (!best || e.score > best.score) best = e;
  }
  if (!best) return null;

  const thr   = cfg.defaults?.global?.score_threshold ?? 0.62;
  const grace = cfg.defaults?.global?.random_grace ?? 0.06;

  if (best.score >= thr) {
    const top = scored.filter(x => x.score === best.score);
    return pickStableByScore(top, seedText)?.s || best.s;
  }
  if (best.score >= thr * (1 - grace) && seededRand(seedText) < grace) return best.s;

  return null;
}

// ---- –ü–£–ë–õ–ò–ß–ù–´–ï API

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-–∫–æ–Ω—Ñ–∏–≥ v3 (–Ω–∞–ø—Ä–∏–º–µ—Ä: /data/stickers.json) –±–µ–∑ –∫—ç—à–∞.
 */
export async function loadStickerConfig(url = "/data/stickers.json") {
  const r = await fetch(url, { cache: "no-store" });
  if (!r.ok) throw new Error(`Failed to load stickers.json: ${r.status}`);
  const cfg = await r.json();
  if (!cfg || cfg._schema?.toLowerCase() !== "v3") {
    console.warn("Unexpected stickers schema, expected v3");
  }
  return cfg;
}

/**
 * –õ—ë–≥–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
 * –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤—ã–µ –ø–æ–ª—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–≤—Ä–∏—Å—Ç–∏–∫–∏.
 */
export function buildSignals({
  userText,
  history, // { total, withStickers, messagesSinceSticker, recentStickerSrcs, todayCountBySrc }
  user_state = [],
  intent, sentiment, timeOfDay, phase
}) {
  const sig = {
    text: userText || "",
    sentiment: sentiment || detectSentiment(userText || ""),
    intent: intent || detectIntent(userText || ""),
    phase: phase || "mid",
    timeOfDay: timeOfDay || detectTimeOfDay(),
    user_state: user_state || [],
    history: history || {
      total: 0,
      withStickers: 0,
      messagesSinceSticker: 999,
      recentStickerSrcs: [],
      todayCountBySrc: {}
    }
  };
  return sig;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–º–æ—â–Ω–∏–∫: —Ä–µ—à–∞–µ—Ç, —Å—Ç–∞–≤–∏—Ç—å –ª–∏ —Å—Ç–∏–∫–µ—Ä, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 *  { sticker: {src,...} | null, utterance: string|null, delayMs: number }
 *
 * –ù–æ–≤–æ–µ: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π seedText ‚Äî –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞ tie-break –∏ grace.
 */
export function decideSticker(cfg, signals, {
  attachUtterance = true,
  addDelay = true,
  seedText = null
} = {}) {
  // –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–∫–∞–∑—ã
  if (violatesGlobal(cfg, signals.history)) {
    return { sticker: null, utterance: null, delayMs: 0 };
  }

  const stats = readStats();
  const selected = pickSticker(cfg, signals, stats, seedText);
  if (!selected) return { sticker: null, utterance: null, delayMs: 0 };

  // –ø–æ–¥—Å–∫–∞–∑–∫–∞-—Ñ—Ä–∞–∑–∞
  const utter = attachUtterance ? pickUtterance(selected) : null;

  // "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è" –∑–∞–¥–µ—Ä–∂–∫–∞
  const delayMs = addDelay ? (200 + Math.floor(Math.random() * 700)) : 0;

  return { sticker: selected, utterance: utter, delayMs };
}

/**
 * –°–æ–æ–±—â–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–µ, —á—Ç–æ —Å—Ç–∏–∫–µ—Ä –±—ã–ª —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî –æ–±–Ω–æ–≤–∏—Ç —Å—á—ë—Ç—á–∏–∫–∏ –∏ –Ω–µ–¥–∞–≤–Ω–∏–µ.
 */
export function markStickerSent(sticker) {
  if (!sticker?.src) return;
  const stats = readStats();
  bumpStats(stats, sticker.src);
}

/**
 * –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç–∏–∫–µ—Ä (–ø–æ–≤—ã—à–∞–µ—Ç/–ø–æ–Ω–∏–∂–∞–µ—Ç –∞—Ñ—Ñ–∏–Ω–∏—Ç–∏).
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: markFeedback(src, "like") –∏–ª–∏ markFeedback(src, "skip")
 */
export function markFeedback(src, kind) {
  const stats = readStats();
  stats.bySrc[src] ||= { today: 0, liked: 0, skipped: 0 };
  if (kind === "like") stats.bySrc[src].liked++;
  if (kind === "skip") stats.bySrc[src].skipped++;
  writeStats(stats);
}
